import { Injectable } from '@angular/core';
import { FormGroup, Validators } from '@angular/forms';

import { FormModelAdapterStrategy } from '../form/form-model-adapter.strategy';
import { TaskModel } from '../../../shared/model/task.model';
import { KeyValueType } from '../../../shared/type/key-value.type';
import { FormControlConfigInterface } from '../../../shared/interface/form-control-config.interface';
import { Dictionary } from '../../../shared/class/dictionary';
import { PropertyModel } from '../../../shared/model/property.model';

@Injectable()
export class TaskModelGeneralAdapterStrategy extends FormModelAdapterStrategy<TaskModel> {

  /**
   * @inheritDoc
   */
  getFormControlConfig(model: TaskModel): KeyValueType<string, FormControlConfigInterface> {

    return {
      typeId: {
        value: model.typeId,
        validators: [],
      },
      title: {
        value: model.title,
        validators: [Validators.required],
      },
      startDate: {
        value: model.startDate,
        validators: [Validators.required],
      },
      startTime: {
        value: model.startTime,
        validators: [],
      },
      durationHours: {
        value: model.durationHours,
        validators: [],
      },
      durationMinutes: {
        value: model.durationMinutes,
        validators: [],
      },
      brokers: {
        value: model.brokers,
        validators: [],
      },
      contacts: {
        value: model.contacts,
        validators: [],
      },
      properties: {
        value: model.properties,
        validators: [],
      },
      promotions: {
        value: model.promotions,
        validators: [],
      },
      location: {
        value: model.location,
        validators: [],
      },
      brokerNotes: {
        value: model.brokerNotes,
        validators: [],
      },
      contactNotes: {
        value: model.contactNotes,
        validators: [],
      },
      publicReport: {
        value: model.publicReport,
        validators: [],
      },
      isSendMessageToContact: {
        value: model.isSendMessageToContact,
        validators: [],
        updateOn: 'change',
      },
      isSendMessageToOwner: {
        value: model.isSendMessageToOwner,
        validators: [],
        updateOn: 'change',
      },
      isEditableByOthers: {
        value: model.isEditableByOthers,
        validators: [],
        updateOn: 'change',
      },
      isShownInReports: {
        value: model.isShownInReports,
        validators: [],
        updateOn: 'change',
      },
      agendaIds: {
        value: model.agendaIds,
        validators: [],
      },
      reminderAtId: {
        value: model.reminderAtId,
        validators: [],
      },
      isCalendarTask: {
        value: model.isCalendarTask,
        validators: [],
        updateOn: 'change',
      },
    };
  }

  /**
   * @inheritDoc
   */
  getModel(model: TaskModel, formGroup: FormGroup, path: string, value: Object|Object[]): TaskModel {

    const newModel = super.getModel(model, formGroup, path, value);

    if (path === 'title') {

      // Allow title auto generation if task not saved and no value set
      newModel.isTitleAutoGenerated = !model.id && value === '';
    }

    if (path === 'properties' && (value as PropertyModel[]).length === 0) {

      newModel.isSendMessageToOwner = false;
    }

    if (path === 'startTime' && !newModel.startTime) {

      newModel.durationHours = null;
      newModel.durationMinutes = null;
    }

    return newModel;
  }

  /**
   * @inheritDoc
   */
  validate(model: TaskModel, currentError: Dictionary<string|null>): null|Dictionary<string|null> {

    const error: Dictionary<string> = {};

    error.typeId = !model.typeId ? 'required' : null;
    error.title = model.title === '' ? 'required' : null;

    // Dates
    error.startDate = model.isCalendarTask === true && !model.startDate ? 'required' : null;
    error.startTime = model.isCalendarTask === true && !model.startTime ? 'required' : null;
    error.durationHours = model.isCalendarTask === true && !model.durationHours ? 'required' : null;
    error.durationMinutes = model.isCalendarTask === true && !model.durationMinutes ? 'required' : null;

    return error;
  }
}
