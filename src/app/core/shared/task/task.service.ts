import { Injectable } from '@angular/core';
import { Store } from '@ngrx/store';
import { Observable, of, zip } from 'rxjs';
import { catchError, map } from 'rxjs/operators';

import { StateInterface } from '../../../core-store/state.interface';
import { TrackingActionEnum } from '../../../shared/enum/tracking-action.enum';
import { TaskEventChangeFinished } from '../../../core-store/ui-task/actions/task-event-change-finished';
import { TaskEventDelete } from '../../../core-store/ui-task/actions/task-event-delete';
import { TaskEventChangeImportant } from '../../../core-store/ui-task/actions/task-event-change-important';
import { ModelServiceAbstract } from '../../../shared/service/model-service.abstract';
import { PaginationInterface } from '../../../shared/interface/pagination.interface';
import { SortInterface } from '../../../shared/interface/sort.interface';
import { ModelListInterface } from '../../../shared/interface/model-list.interface';
import { TaskModel } from '../../../shared/model/task.model';
import { selectDataTask, selectDataTasks } from '../../../core-store/data-task/selectors';
import { TaskApiService } from '../../../api/shared/task/task-api.service';
import { TaskSearchModel } from '../../../shared/model/task-search.model';
import { RuntimeService } from '../../../runtime/shared/runtime.service';
import { TrackerService } from '../tracker/tracker.service';
import { BrowserService } from '../browser/browser.service';
import { ModelSaveInterface } from '../../../shared/interface/model-save.interface';
import { LegacyParserService } from '../../../api/format/legacy/legacy-parser.service';
import { TaskConfig } from './task.config';
import { Dictionary } from '../../../shared/class/dictionary';
import { ContactModel } from '../../../shared/model/contact.model';

@Injectable()
export class TaskService extends ModelServiceAbstract<TaskModel> {

  /**
   * Constructor
   */
  constructor(
    private store$: Store<StateInterface>,
    private taskApiService: TaskApiService,
    private browserService: BrowserService,
    private trackerService: TrackerService,
    private runtimeService: RuntimeService,
    private legacyParserService: LegacyParserService,
    private moduleConfig: TaskConfig,
  ) {

    super();
  }

  /**
   * @inheritDoc
   */
  factory(): TaskModel {

    return new TaskModel();
  }

  /**
   * @inheritDoc
   */
  select(id: string): Observable<TaskModel|null> {

    return this.store$.select(selectDataTask(id));
  }

  /**
   * Select task models
   */
  selectTasks(): Observable<Dictionary<TaskModel>> {

    return this.store$.select(selectDataTasks);
  }

  /**
   * @inheritDoc
   */
  list(
    pagination: PaginationInterface,
    sort: SortInterface,
    filters: TaskSearchModel,
  ): Observable<ModelListInterface<TaskModel>> {

    return this.taskApiService.list(pagination, sort, filters);
  }

  /**
   * @inheritDoc
   */
  load(id: string): Observable<TaskModel> {

    return zip(
      this.taskApiService.load(id),
      this.runtimeService.selectOptions(),
    ).pipe(
      map(([model, options]) => {

        const task = model.clone<TaskModel>();
        const typeOption = options.taskType.find(opt => opt.value === model.typeId);
        const reminderOption = options.reminderAt.find(opt => opt.value === model.reminderAtId);
        const agendaLabels = options.agenda.filter(opt => model.agendaIds.indexOf(opt.value) > -1).map(opt => opt.text);

        task.typeLabel = typeOption ? typeOption.text : '';
        task.reminderAtLabel = reminderOption ? reminderOption.text : '';
        task.agendaLabels = agendaLabels;
        task.isTitleAutoGenerated = false;

        return task;
      }),
    );
  }

  /**
   * Return an observable of the default task assignee
   */
  defaultAssignee(): Observable<ContactModel> {

    return this.taskApiService.defaultAssignee();
  }

  /**
   * Load task page
   */
  page(id: string): void {

    // TODO[later] Remove tracking from here and move it to task page component on init

    // Stats
    this.trackerService.trackString(TrackingActionEnum.taskView, id);

    // Call legacy function to show task details
    this.browserService.getWindow().loadTaskDetails(id);
  }

  /**
   * Update importance
   */
  updateImportance(taskId: string, isImportant: boolean): void {

    this.store$.dispatch(
      new TaskEventChangeImportant({
        taskId,
        isImportant,
      }),
    );
  }

  /**
   * Update finished status
   */
  updateFinished(taskId: string, isFinished: boolean): void {

    this.store$.dispatch(
      new TaskEventChangeFinished({
        taskId,
        isFinished,
      }),
    );
  }

  /**
   * Delete task
   */
  remove(taskId: string): void {

    this.store$.dispatch(
      new TaskEventDelete({ taskId }),
    );
  }

  /**
   * @inheritDoc
   */
  save(model: TaskModel): Observable<ModelSaveInterface> {

    return this
      .taskApiService
      .save(model)
      .pipe(
        map(response => this.legacyParserService.parseErrors(response, this.moduleConfig.SAVE_VALIDATION_MAPPING)),
        catchError(response => of(
          this.legacyParserService.parseErrors(response, this.moduleConfig.SAVE_VALIDATION_MAPPING),
        )),
      );
  }
}
